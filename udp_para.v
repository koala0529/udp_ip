`define altera

/* UDP数据头格式 bit
0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7
---------------------------------------------------------------
|           UDP源端口         |        UDP目的端口            | 0
---------------------------------------------------------------
|           长度              |           UDP校验和           | 1
---------------------------------------------------------------
|                            数据                             | 2
---------------------------------------------------------------
							。
							。
							。
---------------------------------------------------------------
*/
`define		U_SRC_P      16'd8080 //源端口号
`define		U_DST_P      16'd8080 //目的端口号
`define     U_D_LTH      16'd1     //数据长度单位Byte最大单次传输512byte
`define		U_LENGTH     16'd8+`U_D_LTH //数据长度Byte 512byte数据
`define		U_CHK        15'd0 //可选择不用
//------------------------------------------------------------

/* IP数据头格式 bit
0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7
---------------------------------------------------------------
|版本 |头长度|  服务类型      |          头总长度             |0
---------------------------------------------------------------
|           标识              |标志 |           片偏移        |1
---------------------------------------------------------------
|生存时间    |协议            |头检验和                       |2
---------------------------------------------------------------
|                              源IP                           |3
---------------------------------------------------------------
|                             目的IP                          |4 
--------------------------------------------------------------- 
|					选项					|   填充          |5 //这行暂时未用
---------------------------------------------------------------
*/
`define		I_VER		 	4'd4 //4 代表IPV4协议
`define		I_H_LENGHT      4'd5 //代表IP头有多少个64位 这里的单位是4byte，所以总共4*5=20byte 
`define		I_SER_TYPE      8'h00 //服务类型
`define		I_LENGTH		(`U_LENGTH+`I_H_LENGHT*4) //512byte数据
`define		I_FLAG       	3'b000 //代表不分组 3'b010
`define		I_B_SHIFT      	13'd0 //分组的时候有用，这里直接不用了。
`define		I_TTL    		8'h80 //生存时间
`define		I_PROTO 		8'h11 //UDP协议
`define		I_SRC_IP		{8'd10,8'd1,8'd0,8'd77} //源ip地址10.1.0.88
`define		I_DST_IP 		{8'd10,8'd1,8'd0,8'd33} //目标IP地址10.1.0.33
//`define		I_SUM 
//-------------------------------------------------------------

/* MAC数据头格式 bit
0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7。。。。
----------------------------------------------------------------------
|帧同步前导   |目的MAC    |源MAC      |帧类型|   IP数据....(46-1500)....
------8------------6----------6----------2----------------------------
|              CRC32 (除了前导码不校验)                       |
---------------------------------4-----------------------------
*/
`define M_PRE  		64'hd5_55_55_55_55_55_55_55 //以太网前导码 这个是固定的。从低位到高位发出去
`define DST_MAC 	{48'h88_88_88_88_88_00}  //3C_97_0E_B8_F6_D6}	//目标设备的MAC地址
//`define DST_MAC 	48'h00_0a_35_01_fe_c0
//目标网络字节顺序的MAC
`define M_DST	(((`DST_MAC<<4)& 48'hF0_F0_F0_F0_F0_F0)|((`DST_MAC>>4)& 48'h0F_0F_0F_0F_0F_0F))//
`define SRC_MAC 	{48'h88_88_88_88_88_88}	//FPGA设备的MAC地址
//源网络字节顺序的MAC	
`define M_SRC	(((`SRC_MAC>>4)& 48'h0F_0F_0F_0F_0F_0F)|((`SRC_MAC<<4)& 48'hF0_F0_F0_F0_F0_F0))							
`define M_TYPE 		16'h0800 	//帧类型 IP协议	
`define ARP_TYPE 	16'h0806 //ARP PROTOCAL	
//------------------------------------------------------------
		
/*发送状态机标记
IDEL->MAC->IP->UDP->DATA->CRC32->DONE
*/
`define S_IDEL 			4'd0 	//发送空闲状态
`define S_M_PRE			4'd1
`define S_MAC       	4'd2
`define S_IP 			4'd3
`define S_UDP 			4'd4
`define S_DATA_S 		4'd5
`define S_DATA_L 		4'd6
`define S_CRC	 		4'd7
`define S_DONE	 		4'd8 
`define S_TEST       	4'd9
`define S_ARP      		4'd10
//`define S_MAC 		4'd1
//`define S_MAC 		4'd1
//--------------------------------------------


/*接收状态机标记
IDEL->MAC->IP->UDP->DATA->CRC32->DONE
*/	
`define R_IDEL 				4'd0 	//接收空闲状态
`define R_M_PRE				4'd1
`define R_MAC       		4'd2
`define R_IP 				4'd3
`define R_UDP 				4'd4
`define R_DATA 				4'd5
`define R_CRC	 			4'd6
`define R_DONE	 			4'd7
`define R_ARP	 			4'd8 
//`define S_MAC 		4'd1
//`define S_MAC 		4'd1
//--------------------------------------------


/*发送状态中需要发送的数据长度单位4bit
IDEL->MAC->IP->UDP->DATA->CRC32->DONE
*/
`define S_M_PRE_LTH  	6'd16 //前导码长度
`define S_M_LTH			6'd28
`define S_I_LTH 		6'd40		
`define S_U_LTH 		6'd16
//`define S_D_LTH 		
`define S_C_LTH 		6'd8
//-------------------------------------------


//-------------------------------------------
//连续发送的时候,每帧发完之后等待的周期数。
//这里用来 控制帧率
//帧间最小间隔为96 bit 的发送时间
`define S_W_CLK  		10'd24
//-------------------------------------------
/* ##################################################################
Ethernet II以太网帧格式：

目标MAC   源MAC   类型    数据          FCS
6字节     6字节   2字节   46-1500字节   4字节

所以最小6+6+2+46+4 = 64，最大6+6+2+1500+4 = 1518。
（注：ISL封装后可达1548字节，802.1Q封装后可达1522字节） 
*/